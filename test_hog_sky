#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Mon Jul  3 09:44:14 2017

@author: viper


"""

import matplotlib.pyplot as plt

from skimage.feature import hog
from skimage import color, exposure
from skimage import io
from skimage import draw
from skimage.transform import rescale, resize, downscale_local_mean


import numpy as np
import os
plt.close('all') # Close all remaining figures

fileList = os.listdir(os.getcwd()+'/move1-polar/')
i=0
# Try to get a template from histograms

            
"""
for filename in fileList:
    try :
        if filename[0] == 'D':
            
            im = io.imread('move1-polar/' + filename)
            im1 = im[20:52, 120:152] # sky            
            im2 = im[198:230, 223:255] # no sky
            plt.imsave('hog_sky/'+str(i)+'.png', im1, cmap = 'gray', format = 'png')
            plt.imsave('hog_sky/_'+str(i)+'.png', im2, cmap = 'gray', format = 'png')
            i+=1
    except IOError :
        print(filename+' : Not a file or not an image (IOError). This file will be skipped.')
"""       
X, y = [], []
fileList = os.listdir(os.getcwd()+'/hog_sky/')
for filename in fileList:
    try :
        if filename[0] == '_':
            im = io.imread('hog_sky/' + filename)
            im = color.rgb2gray(im)
            fd, hog_image = hog(im, orientations=8, pixels_per_cell=(4, 4),cells_per_block=(1, 1), visualise=True)
            X.append(fd)
            y.append(False)
        else:
            im = io.imread('hog_sky/' + filename)
            im = color.rgb2gray(im)
            fd, hog_image = hog(im, orientations=8, pixels_per_cell=(4, 4), cells_per_block=(1, 1), visualise=True)
            X.append(fd)
            y.append(True)

        
    except IOError :
        print(filename+' : Not a file or not an image (IOError). This file will be skipped.')

from sklearn import svm
clf = svm.SVC()
clf.fit(X, y) 
svm.SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,
    decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',
    max_iter=-1, probability=False, random_state=None, shrinking=True,
    tol=0.001, verbose=False)


""" Test """
im = io.imread('move1-polar/DoP_0.tiff')
img = np.zeros(im.shape)
w,h = im.shape
toTestLater = []
for i in range(0,w-32,32):
    for j in range(0,h-32,32):
        toPredict = im[i:i+32,j:j+32]
        fd, hog_image = hog(toPredict, orientations=8, pixels_per_cell=(4, 4), cells_per_block=(1, 1), visualise=True)        
        result = clf.predict([fd])
        if result:
            #rr, cc = draw.polygon([i,i,i+32,i+32], [j,j+32,j+32,j])
            #img[rr, cc] = 1
            toTestLater.append((i,j))

for i,j in toTestLater:
    for k in [0,16]:
        for l in [0,16]:
            toPredict = im[i+k:i+k+16,j+l:j+l+16]
            toPredict = resize(toPredict, (32, 32))
            fd, hog_image = hog(toPredict, orientations=8, pixels_per_cell=(4, 4), cells_per_block=(1, 1), visualise=True)        
            result = clf.predict([fd])
            print(result)
            if result:
                rr, cc = draw.polygon([i+k,i+k,i+k+16,i+k+16],[j+l,j+l+16,j+l+16,j+l])
                img[rr, cc] = 1
plt.imshow(color.label2rgb(img, im))



